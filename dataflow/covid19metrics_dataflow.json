{
	"name": "covid19metrics_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sqldb_metrics_parquet",
						"type": "DatasetReference"
					},
					"name": "sqldbcovid19metricsdataflow"
				},
				{
					"dataset": {
						"referenceName": "df_metrics_parquet_copy1",
						"type": "DatasetReference"
					},
					"name": "dfcovid19metricsdataflow"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "deaths_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkdeaths"
				},
				{
					"dataset": {
						"referenceName": "recoveries_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkrecoveries"
				},
				{
					"dataset": {
						"referenceName": "cases_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkcases"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "selectdeaths"
				},
				{
					"name": "selectrecoveries"
				},
				{
					"name": "selectcases"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sqldbcovid19metricsdataflow",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> dfcovid19metricsdataflow",
				"sqldbcovid19metricsdataflow, dfcovid19metricsdataflow union(byName: true,",
				"     partitionBy('hash', 1))~> union1",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Deaths,",
				"          Deaths_Change,",
				"          ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdeaths",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Recovered,",
				"          Recovered_Change,",
				"          ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrecoveries",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcases",
				"selectdeaths sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['Deaths.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkdeaths",
				"selectrecoveries sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['Recoveries.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkrecoveries",
				"selectcases sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['Cases.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkcases"
			]
		}
	}
}